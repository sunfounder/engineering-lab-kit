.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauche tiefer in Raspberry Pi, Arduino und ESP32 zusammen mit anderen Enthusiasten ein.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂se Probleme nach dem Kauf und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tausche Tipps und Tutorials aus, um deine F√§higkeiten zu erweitern.
    - **Exklusive Vorschauen**: Erhalte fr√ºhzeitig Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezielle Rabatte**: Genie√üe exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nimm an Gewinnspielen und festlichen Aktionen teil.

    üëâ Bereit, mit uns zu erkunden und zu erschaffen? Klicke auf [|link_sf_facebook|] und tritt noch heute bei!

24. Der Pomodoro-Timer
===========================================

In dieser Lektion werden wir die Schnittstelle zwischen Zeitmanagement und Technologie erkunden, indem wir einen Pomodoro-Timer mit einem Arduino und einem aktiven Summer erstellen. Du wirst lernen, wie du die internen Zeitfunktionen des Arduino nutzt, um einen Timer zu bauen, der Arbeitsintervalle von 25 Minuten Fokusarbeit und 5 Minuten Pause unterteilt. Diese Methode, bekannt als die Pomodoro-Technik, steigert Produktivit√§t und Konzentration. W√§hrend des Kurses wirst du eine solide Grundlage in der elektronischen Zeitmessung erlangen und praktische Erfahrungen in Programmierung und Schaltungsaufbau sammeln. Am Ende wirst du einen funktionalen Pomodoro-Timer gebaut haben, der dir hilft, deine Zeit effizient zu nutzen!

.. image:: img/19_tomato_timer.jpg
  :width: 500
  :align: center

.. raw:: html

     <video controls style = "max-width:90%">
        <source src="_static/video/24_beep_timer.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Am Ende dieser Lektion wirst du in der Lage sein:

* Die historische Bedeutung von Klang in der Zeitmessung zu verstehen.
* Die Komponenten zu identifizieren, die zum Bau einer elektronischen Timer-Schaltung erforderlich sind.
* Einen Arduino zu programmieren, um einen Summer f√ºr das Zeitmanagement mit den Funktionen ``delay()`` und ``millis()`` zu steuern.
* Die Pomodoro-Technik in der Praxis anzuwenden, indem du einen Timer erstellst, der zwischen Arbeits- und Pausenphasen wechselt.

Uhren und Klang
--------------------

In der Antike wurden gro√üe Glockenschl√§ge verwendet, um den Zeitablauf und bestimmte gesellschaftliche Ereignisse zu markieren.
Beispielsweise nutzten mittelalterliche europ√§ische St√§dte Kirchenglocken, um Gebetszeiten sowie den Beginn und das Ende der Arbeitstage zu signalisieren.
Diese Glockenschl√§ge waren mehr als nur Zeitmarkierungen; sie dienten als Werkzeuge f√ºr die soziale Ordnung, um die sich das t√§gliche Leben der Gemeinschaft drehte.

**Mechanische Uhren und Klang**

.. image:: img/7_big_ben.png
  :width: 500
  :align: center

Mit der Entwicklung mechanischer Uhren, insbesondere mit der Konstruktion des Big Ben, wurden Uhren mit komplexeren Glocken- und Zeitmechanismen ausgestattet.
Der Klang von Big Ben wird von seinen gro√üen Bronzeklocken getragen, die sowohl die Reichweite des Schalls als auch die Pr√§zision der Zeitansage verbessern.
In vielen St√§dten und Gemeinden wurde der Klang von Big Ben zu einer Referenz f√ºr die Bewohner, ihre t√§glichen Aktivit√§ten zu koordinieren. Er spielte eine entscheidende Rolle bei der pr√§ziseren Zeitplanung f√ºr die Navigation, Zugfahrpl√§ne und mehr.

**Klangsteuerung im elektronischen Zeitalter**

.. image:: img/19_timer.jpg
  :width: 500
  :align: center

Im elektronischen Zeitalter erlebten Klang-Timer eine neue Entwicklung. Durch die Einf√ºhrung elektronischer Summer, insbesondere mit Hilfe von Mikrocontrollern wie Arduino,
wurde die Zeitmessung unabh√§ngig von gro√üen mechanischen Ger√§ten. Diese kleinen Ger√§te k√∂nnen T√∂ne mit unterschiedlichen Frequenzen und Tonh√∂hen erzeugen,
die f√ºr verschiedene Zeitsteuerungsanwendungen verwendet werden k√∂nnen, von einfachen K√ºchentimern bis hin zu komplexen industriellen Prozesssteuerungssystemen.
Beispiele sind Rufsysteme in modernen Krankenh√§usern, Schulglocken und Erinnerungen in pers√∂nlichen elektronischen Ger√§ten, die alle elektronische Summer zur Zeitmessung verwenden.

Aufbau der Schaltung
--------------------------

**Ben√∂tigte Komponenten**


.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Steckbrett
     - 1 * Aktiver Summer
     - Verbindungskabel
   * - |list_uno_r3| 
     - |list_breadboard| 
     - |list_active_buzzer| 
     - |list_wire| 
   * - 1 * USB-Kabel
     -
     - 
     - 
   * - |list_usb_cable| 
     -
     - 
     - 



**Schritt-f√ºr-Schritt-Anleitung**

Diese Lektion verwendet denselben Schaltkreis wie :ref:`ar_morse_code`.

.. image:: img/16_morse_code.png
    :width: 500
    :align: center


Coding Creation - Tick Tick
-------------------------------

In Arduino ist ``delay()`` die einfachste und am h√§ufigsten verwendete Zeitfunktion.
Wir verwenden sie oft, um das Programm f√ºr kurze Zeit anzuhalten, was in Kombination mit Schleifen einen blinkenden LED-Effekt erzeugen kann. Hier verwenden wir die ``delay()``-Funktion, um den Summer einmal pro Sekunde ert√∂nen zu lassen.

1. √ñffne die Arduino IDE und starte ein neues Projekt, indem du ‚ÄûNew Sketch‚Äú aus dem Men√º ‚ÄûDatei‚Äú ausw√§hlst.
2. Speichere deinen Sketch als ``Lesson24_Timer_Tick_Tick`` mit ``Strg + S`` oder durch Klicken auf ‚ÄûSpeichern‚Äú.

3. Schreibe den folgenden Code:

.. code-block:: Arduino

  const int buzzerPin = 9;   // Weist die Konstante f√ºr den Summer dem Pin 9 zu  
  
  void setup() {
    // Initialisierungscode, der einmal ausgef√ºhrt wird:
    pinMode(buzzerPin, OUTPUT);  // Setzt Pin 9 auf Ausgang
  } 

  void loop() {
    // Hauptcode, der wiederholt ausgef√ºhrt wird:
    digitalWrite(buzzerPin, HIGH);  // Schaltet den Summer ein
    delay(100);                     // Piepton-Dauer: 100 Millisekunden
    digitalWrite(buzzerPin, LOW);   // Schaltet den Summer aus
    delay(1000);                    // Intervall zwischen den Signalen: 1000 Millisekunden
  }

In dieser Konfiguration h√§lt die erste ``delay()``-Funktion das Arduino Uno R3 f√ºr 100 Millisekunden an, w√§hrend der Summer ert√∂nt. Die zweite ``delay()``-Funktion pausiert das Arduino f√ºr 1000 Millisekunden (1 Sekunde), w√§hrend der Summer stumm bleibt.

4. Nachdem du den Code auf das Arduino Uno R3 hochgeladen hast, wirst du h√∂ren, wie der Summer einmal pro Sekunde piept.

Coding Creation - ``millis()``
---------------------------------

Die Verwendung von ``delay()`` pausiert deinen Code, was manchmal unpraktisch sein kann.

Stell dir zum Beispiel vor, du erhitzt eine Pizza in der Mikrowelle und wartest auf wichtige E-Mails.
Du stellst die Pizza in die Mikrowelle und stellst den Timer auf 10 Minuten. Der Vergleich mit der Nutzung von ``delay()`` w√§re, vor der Mikrowelle zu sitzen und zuzusehen, wie der Timer von 10 Minuten auf null herunterz√§hlt. Falls du w√§hrend dieser Zeit eine wichtige E-Mail erh√§ltst, wirst du sie verpassen.

Normalerweise w√ºrdest du die Pizza in die Mikrowelle stellen, dann deine E-Mails checken und zwischendurch gelegentlich nachsehen, ob der Timer abgelaufen ist.

Arduino bietet auch eine Zeitfunktion, die das Programm nicht pausiert: ``millis()``.

``millis()`` ist eine sehr wichtige Funktion in der Arduino-Programmierung. Sie gibt die Anzahl der Millisekunden zur√ºck, die seit dem Start des Arduino-Boards vergangen sind.

  * ``time = millis()``: Gibt die Anzahl der Millisekunden seit dem Start des Arduino-Boards oder dem letzten Reset zur√ºck. Diese Zahl l√§uft nach etwa 50 Tagen √ºber (zur√ºck auf null).

  **Parameter**
    Keine

  **R√ºckgabewert**
    Anzahl der seit dem Programmstart vergangenen Millisekunden. Datentyp: unsigned long.


Hier lassen wir den Summer ebenfalls einmal pro Sekunde ert√∂nen.

1. √ñffne die Arduino IDE und starte ein neues Projekt, indem du ‚ÄûNew Sketch‚Äú aus dem Men√º ‚ÄûDatei‚Äú ausw√§hlst.
2. Speichere deinen Sketch als ``Lesson24_Timer_Millis`` mit ``Strg + S`` oder durch Klicken auf ‚ÄûSpeichern‚Äú.

3. Erstelle zun√§chst eine Konstante namens ``buzzerPin`` und setze sie auf Pin 9.

.. code-block:: Arduino
  :emphasize-lines: 1

  const int buzzerPin = 9;   // Weist die Konstante f√ºr den Summer dem Pin 9 zu

  void setup() {
    // Initialisierungscode, der einmal ausgef√ºhrt wird:
  }

4. Erstelle zwei Variablen vom Typ ‚Äûlong‚Äú: ``previousMillis`` speichert den Zeitstempel des letzten Pieptons und ``interval`` legt fest, wie oft der Summer piept, in Millisekunden. Hier soll der Summer alle 1000 Millisekunden (oder jede Sekunde) ert√∂nen.

.. code-block:: Arduino
  :emphasize-lines: 3,4

  const int buzzerPin = 9;  // Weist die Konstante f√ºr den Summer dem Pin 9 zu

  unsigned long previousMillis = 0;  // Speichert den Zeitstempel des letzten Pieptons
  long interval = 1000;              // Intervall f√ºr das Piepen (Millisekunden)



5. Setze in der ``void setup()``-Funktion den Summer-Pin auf den Ausgangsmodus.

.. code-block:: Arduino
  :emphasize-lines: 8

  const int buzzerPin = 9;  // Weist die Konstante f√ºr den Summer dem Pin 9 zu

  unsigned long previousMillis = 0;  // Speichert den Zeitstempel des letzten Pieptons
  long interval = 1000;              // Intervall f√ºr das Piepen (Millisekunden)

  void setup() {
    // Initialisierungscode, der einmal ausgef√ºhrt wird:
    pinMode(buzzerPin, OUTPUT);  // Setzt Pin 9 auf Ausgang
  }

6. Erstelle in der Funktion ``void loop()`` eine Variable vom Typ ``unsigned long`` namens ``currentMillis``, um die aktuelle Zeit zu speichern.

.. code-block:: Arduino
  :emphasize-lines: 3

  void loop() {
    // Hauptcode, der wiederholt ausgef√ºhrt wird:
    unsigned long currentMillis = millis();
  }

7. Wenn die aktuelle Laufzeit abz√ºglich der letzten Aktualisierungszeit 1000ms √ºberschreitet, l√∂se einige Funktionen aus. Aktualisiere auch ``previousMillis`` auf die aktuelle Zeit, damit der n√§chste Ausl√∂ser nach 1 Sekunde erfolgt.

.. code-block:: Arduino
  :emphasize-lines: 5,6

  void loop() {
    // Hauptcode, der wiederholt ausgef√ºhrt wird:
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Speichert die letzte Zeit, als der Summer ert√∂nte
    }
  }

8. F√ºge die Hauptfunktionen hinzu, die periodisch ausgef√ºhrt werden sollen. In diesem Fall soll der Summer ert√∂nen.

.. code-block:: Arduino
  :emphasize-lines: 7,8,9

  void loop() {
    // Hauptcode, der wiederholt ausgef√ºhrt wird:
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Speichert die letzte Zeit, als der Summer ert√∂nte
      digitalWrite(buzzerPin, HIGH);   // Lasse den Summer ert√∂nen
      delay(100);
      digitalWrite(buzzerPin, LOW);  // Stille
    }
  }

9. Dein vollst√§ndiger Code sollte so aussehen. Lade ihn auf das Arduino Uno R3 hoch, und du wirst feststellen, dass der Summer einmal pro Sekunde ert√∂nt.

.. code-block:: Arduino

  const int buzzerPin = 9;  // Weist die Konstante f√ºr den Summer dem Pin 9 zu

  unsigned long previousMillis = 0;  // Speichert den Zeitstempel des letzten Pieptons
  long interval = 1000;              // Intervall f√ºr das Piepen (Millisekunden)

  void setup() {
    // Initialisierungscode, der einmal ausgef√ºhrt wird:
    pinMode(buzzerPin, OUTPUT);  // Setzt Pin 9 auf Ausgang
  }

  void loop() {
    // Hauptcode, der wiederholt ausgef√ºhrt wird:
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Speichert die letzte Zeit, als der Summer ert√∂nte
      digitalWrite(buzzerPin, HIGH);   // Lasse den Summer ert√∂nen
      delay(100);
      digitalWrite(buzzerPin, LOW);  // Stille
    }
  }

**Frage**

Was passiert, wenn ``delay(100);`` auf ``delay(1000);`` ge√§ndert wird? Warum?

Coding Creation - Pomodoro Timer
------------------------------------

Die Pomodoro-Technik, auch bekannt als Tomaten-Technik, ist eine Zeitmanagement-Methode, die in den sp√§ten 1980er Jahren von Francesco Cirillo entwickelt wurde.
Diese Methode verwendet einen Timer, um die Arbeit in 25-min√ºtige Intervalle zu unterteilen, gefolgt von kurzen Pausen.
Jedes Arbeitsintervall wird als "Pomodoro" bezeichnet, benannt nach dem tomatenf√∂rmigen K√ºchentimer, den Cirillo w√§hrend seiner Studienzeit verwendete.

.. image:: img/19_tomato_timer.jpg
  :width: 500
  :align: center

Die grundlegenden Schritte der Pomodoro-Technik umfassen:

1. **Definiere die Aufgabe**: Entscheide dich f√ºr die Aufgabe, die du vor dem Start erledigen m√∂chtest.
2. **Stelle den Pomodoro-Timer**: Stelle einen Timer auf 25 Minuten Arbeitszeit ein.
3. **Arbeite intensiv**: Konzentriere dich voll auf die Aufgabe w√§hrend dieser 25 Minuten und vermeide jede Form von Ablenkung.
4. **Mache eine kurze Pause**: Sobald die Arbeitszeit abgelaufen ist, mache eine 5-min√ºtige Pause. In dieser Zeit kannst du dich bewegen, strecken, Wasser trinken usw., aber vermeide arbeitsbezogene Aktivit√§ten.

Die Vorteile der Pomodoro-Technik umfassen eine verbesserte Konzentration, reduzierte Erm√ºdung, klare Abgrenzung von Arbeits- und Pausenzeiten, die dabei helfen, Ablenkungen zu minimieren, sowie eine erh√∂hte Motivation und Zufriedenheit durch das Erreichen von Aufgaben. Au√üerdem erfordert die Pomodoro-Technik keine komplizierten Werkzeuge oder Technologien ‚Äì ein einfacher Timer ist ausreichend.

Als N√§chstes werden wir einen Timer programmieren, der alle 25 Minuten piept, um das Ende einer Arbeitsperiode anzuzeigen, gefolgt von einer Erinnerung an eine 5-min√ºtige Pause:

1. √ñffne die Arduino IDE und starte ein neues Projekt, indem du ‚ÄûNew Sketch‚Äú aus dem Men√º ‚ÄûDatei‚Äú ausw√§hlst.
2. Speichere deinen Sketch als ``Lesson24_Timer_Millis_Pomodoro`` mit ``Strg + S`` oder durch Klicken auf ‚ÄûSpeichern‚Äú.

3. Definiere einige Konstanten und Variablen vor ``void setup()``.

* ``buzzerPin`` identifiziert, an welchem Pin der Summer angeschlossen ist.
* ``startMillis`` verfolgt, wann der Timer gestartet wurde.
* ``workPeriod`` und ``breakPeriod`` definieren, wie lange jede Periode dauert.
* ``isWorkPeriod`` ist eine boolesche Variable, die verwendet wird, um zu verfolgen, ob es Zeit zum Arbeiten oder f√ºr eine Pause ist.

.. code-block:: Arduino

  const int buzzerPin = 9;          // Weist die Konstante f√ºr den Summer dem Pin 9 zu
  unsigned long startMillis;        // Speichert die Startzeit des Timers
  const long workPeriod = 1500000;  // Arbeitsperiode von 25 Minuten
  const long breakPeriod = 300000;  // Pausenperiode von 5 Minuten
  static bool isWorkPeriod = true;  // Verfolgt, ob es eine Arbeits- oder Pausenperiode ist
  
4. Initialisiere den Summer-Pin als Ausgang und starte den Timer, indem du die Startzeit mit ``millis()`` speicherst.

.. code-block:: Arduino
  :emphasize-lines: 2,3
  
  void setup() {
    pinMode(buzzerPin, OUTPUT); // Initialisiere den Summer-Pin als Ausgang
    startMillis = millis(); // Speichere die Startzeit
  }

5. Erstelle in der Funktion ``void loop()`` eine Variable vom Typ ``unsigned long`` namens ``currentMillis``, um die aktuelle Zeit zu speichern.

.. code-block:: Arduino
  :emphasize-lines: 2

  void loop() {
    unsigned long currentMillis = millis(); // Aktualisiere die aktuelle Zeit
  }


6. Verwende ``if else if``-Bedingungsanweisungen, um festzustellen, ob es sich um eine Arbeitsperiode handelt.

.. code-block:: Arduino
  :emphasize-lines: 4-6

  void loop() {
    unsigned long currentMillis = millis(); // Aktualisiere die aktuelle Zeit

    if (isWorkPeriod){ 
    } else if (!isWorkPeriod){
    }
  }

7. Falls es eine Arbeitsperiode ist, pr√ºfe, ob die aktuelle Zeit die ``workPeriod`` √ºberschritten hat. Wenn ja, setze den Timer zur√ºck, wechsle zur Pausenperiode und aktiviere den Summer, um zweimal f√ºr eine l√§ngere Dauer zu ert√∂nen.

.. code-block:: Arduino
  :emphasize-lines: 5-16

  void loop() {
    unsigned long currentMillis = millis();  // Aktualisiere die aktuelle Zeit

    if (isWorkPeriod) {
      if (currentMillis - startMillis >= workPeriod) {
        startMillis = currentMillis;  // Setze den Timer zur√ºck
        isWorkPeriod = false;         // Wechsle zur Pausenperiode
        digitalWrite(buzzerPin, HIGH);  // Schalte den Summer ein
        delay(500);                     // Summer an f√ºr 500 Millisekunden
        digitalWrite(buzzerPin, LOW);   // Schalte den Summer aus
        delay(200);                     // Summer aus f√ºr 200 Millisekunden
        digitalWrite(buzzerPin, HIGH);  // Schalte den Summer ein
        delay(500);                     // Summer an f√ºr 500 Millisekunden
        digitalWrite(buzzerPin, LOW);   // Schalte den Summer aus
        delay(200);                     // Summer aus f√ºr 200 Millisekunden
      }
    } else if (!isWorkPeriod) {
    }
  }


8. Verwende ``else if``-Bedingungsanweisungen, um festzustellen, ob es sich um eine Pausenperiode handelt, und pr√ºfe √§hnlich, ob die aktuelle Zeit die ``breakPeriod`` √ºberschritten hat. Wenn ja, setze den Timer zur√ºck, wechsle zur√ºck zur Arbeitsperiode und aktiviere den Summer, um zweimal kurz zu ert√∂nen.

.. code-block:: Arduino

  } else if (!isWorkPeriod) {
    if (currentMillis - startMillis >= breakPeriod) {
      startMillis = currentMillis;  // Setze den Timer zur√ºck
      isWorkPeriod = true;          // Wechsle zur Arbeitsperiode
      digitalWrite(buzzerPin, HIGH);  // Schalte den Summer ein
      delay(200);                     // Summer an f√ºr 200 Millisekunden
      digitalWrite(buzzerPin, LOW);   // Schalte den Summer aus
      delay(200);                     // Summer aus f√ºr 200 Millisekunden
      digitalWrite(buzzerPin, HIGH);  // Schalte den Summer ein
      delay(200);                     // Summer an f√ºr 200 Millisekunden
      digitalWrite(buzzerPin, LOW);   // Schalte den Summer aus
      delay(200);                     // Summer aus f√ºr 200 Millisekunden
    }
  }


9. Dein vollst√§ndiger Code sollte so aussehen, und du kannst ihn auf das Arduino Uno R3 hochladen, um die Effekte zu sehen.

.. note::

  Wenn du das Warten auf eine 25-min√ºtige Arbeitsperiode und eine 5-min√ºtige Pause w√§hrend des Debuggens zu lange findest, 
  kannst du die ``workPeriod`` auf 15000 Millisekunden und die ``breakPeriod`` auf 3000 Millisekunden verk√ºrzen. Du wirst dann h√∂ren, wie der Summer alle 15 Sekunden zweimal lang ert√∂nt, gefolgt von zweimal kurzem Piepen nach 3 Sekunden.


.. code-block:: Arduino

  const int buzzerPin = 9;          // Weist die Konstante f√ºr den Summer dem Pin 9 zu
  unsigned long startMillis;        // Speichert die Startzeit des Timers
  const long workPeriod = 1500000;  // Arbeitsperiode von 25 Minuten
  const long breakPeriod = 300000;  // Pausenperiode von 5 Minuten
  static bool isWorkPeriod = true;  // Verfolgt, ob es eine Arbeits- oder Pausenperiode ist

  void setup() {
    pinMode(buzzerPin, OUTPUT); // Initialisiere den Summer-Pin als Ausgang
    startMillis = millis(); // Speichere die Startzeit
  }

  void loop() {
    unsigned long currentMillis = millis(); // Aktualisiere die aktuelle Zeit

    if (isWorkPeriod){ 
      if(currentMillis - startMillis >= workPeriod) {
        startMillis = currentMillis; // Setze den Timer zur√ºck
        isWorkPeriod = false; // Wechsle zur Pausenperiode
        digitalWrite(buzzerPin, HIGH);  // Schalte den Summer ein
        delay(500);                     // Summer an f√ºr 500 Millisekunden
        digitalWrite(buzzerPin, LOW);   // Schalte den Summer aus
        delay(200);                     // Summer aus f√ºr 200 Millisekunden
        digitalWrite(buzzerPin, HIGH);  // Schalte den Summer ein
        delay(500);                     // Summer an f√ºr 500 Millisekunden
        digitalWrite(buzzerPin, LOW);   // Schalte den Summer aus
        delay(200);                     // Summer aus f√ºr 200 Millisekunden
      }
    } else if (!isWorkPeriod) 
      if(currentMillis - startMillis >= breakPeriod) {
        startMillis = currentMillis; // Setze den Timer zur√ºck
        isWorkPeriod = true; // Wechsle zur Arbeitsperiode
        digitalWrite(buzzerPin, HIGH);  // Schalte den Summer ein
        delay(200);                     // Summer an f√ºr 200 Millisekunden
        digitalWrite(buzzerPin, LOW);   // Schalte den Summer aus
        delay(200);                     // Summer aus f√ºr 200 Millisekunden
        digitalWrite(buzzerPin, HIGH);  // Schalte den Summer ein
        delay(200);                     // Summer an f√ºr 200 Millisekunden
        digitalWrite(buzzerPin, LOW);   // Schalte den Summer aus
        delay(200);                     // Summer aus f√ºr 200 Millisekunden
      }
    }
  }

10. Denke daran, deinen Code zu speichern und deinen Arbeitsplatz aufzur√§umen.

**Frage**

Denke √ºber andere Situationen in deinem Leben nach, in denen du Zeit "h√∂rst". Liste einige Beispiele auf und schreibe sie in dein Notizbuch!

**Zusammenfassung**

Im heutigen Kurs haben wir erfolgreich eine elektronische Version des Pomodoro-Timers gebaut, ein wertvolles Werkzeug zur Steigerung der Produktivit√§t durch strukturierte Arbeits- und Pausenintervalle. Durch dieses Projekt haben die Sch√ºler die N√ºtzlichkeit von Summern im Zeitmanagement und die praktische Anwendung der ``millis()``-Funktion kennengelernt, um nicht blockierende Timer-Code in Arduino zu erstellen. Dieser Ansatz erm√∂glicht Multitasking in Mikrocontroller-Anwendungen und spiegelt komplexere Systeme in Technologie und Industrie wider.


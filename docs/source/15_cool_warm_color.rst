.. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauche tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 zusammen mit Gleichgesinnten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂se Probleme nach dem Kauf und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tausche Tipps und Tutorials aus, um deine F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalte vorab Informationen √ºber neue Produktank√ºndigungen und Einblicke.
    - **Spezielle Rabatte**: Genie√üe exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nimm an Gewinnspielen und Sonderaktionen teil.

    üëâ Bereit, mit uns zu erkunden und zu kreieren? Klicke auf [|link_sf_facebook|] und trete noch heute bei!

15. K√ºhle oder warme Farben
================================

Farben sind nicht nur ein Teil unserer visuellen Erfahrung ‚Äì sie beeinflussen auch unsere Emotionen und Gef√ºhle. In dieser Lektion tauchen wir in die psychologischen Auswirkungen von Farben ein und lernen, wie man eine RGB-LED verwendet, um zwischen warmen und k√ºhlen Farben zu wechseln und so die Effekte wechselnder Lichttemperaturen zu simulieren.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/15_cool_warm_color.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>


**√úberblick**

Das Konzept von k√ºhlen und warmen Farben bezieht sich auf die psychologischen Effekte, die Farben auf unsere Wahrnehmung haben. Rott√∂ne, Oranget√∂ne, Gelb- und Braunt√∂ne l√∂sen typischerweise Gef√ºhle von W√§rme und Aufregung aus und werden als warme Farben klassifiziert. Im Gegensatz dazu vermitteln Gr√ºnt√∂ne, Blaut√∂ne und Violettt√∂ne oft beruhigende, erfrischende und gro√üz√ºgige Gef√ºhle und gelten als k√ºhle Farben. Orange und Blau befinden sich an den entgegengesetzten Enden dieses warm-kalt-Spektrums.

.. image:: img/15_mix_color_warm_cool.png
    :width: 400
    :align: center

Zu Hause oder in Freizeitumgebungen bevorzugen Menschen Beleuchtung in hellgelben oder cremewei√üen T√∂nen, die eine gem√ºtliche Atmosph√§re schaffen, √§hnlich wie bei Sonnenuntergang oder Kerzenlicht.

.. image:: img/15_mix_color_warm_room.png
    :width: 400
    :align: center

In Bibliotheken, Klassenzimmern, B√ºros und Krankenh√§usern werden k√ºhlere Lichtt√∂ne bevorzugt, da sie die Konzentration und Frische f√∂rdern, die f√ºr das Arbeiten und Lernen f√∂rderlich sind.

.. image:: img/15_mix_color_cool_room.png
    :width: 400
    :align: center

Die W√§rme oder K√ºhle des Lichts ist eine unmittelbare Erfahrung, die unsere psychologische Reaktion und unseren visuellen Komfort beeinflusst. Designer und Lichtingenieure w√§hlen sorgf√§ltig die Farbtemperaturen aus, die zur Funktion eines Raums und zur gew√ºnschten Atmosph√§re passen, um sowohl √§sthetisch ansprechende als auch praktische Lichtumgebungen zu schaffen. Durch die wissenschaftliche Anwendung dieser Prinzipien k√∂nnen wir die Qualit√§t unserer Lebens- und Arbeitsr√§ume verbessern und so eine ges√ºndere und angenehmere Atmosph√§re schaffen.

In dieser Lektion schl√ºpfen wir in die Rolle von Lichtingenieuren, um ein Beleuchtungssystem zu erstellen, das zwischen Farbtemperaturen wechseln kann.

**Lernziele**

- Verstehen der psychologischen Effekte von k√ºhlen und warmen Farben.
- Erforschen, wie Lichttemperaturen Stimmung und Ambiente beeinflussen.
- Erlernen, wie RGB-LEDs verwendet werden, um verschiedene Farbtemperaturen mit Arduino zu simulieren.
- Entwickeln praktischer F√§higkeiten im Umgang mit der ``map()``-Funktion, um zwischen Farbtemperaturen zu wechseln.


Den Schaltkreis aufbauen
------------------------------------

**Ben√∂tigte Komponenten**


.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * RGB-LED
     - 3 * 220Œ© Widerstand
     - 1 * Potentiometer
   * - |list_uno_r3| 
     - |list_rgb_led| 
     - |list_220ohm| 
     - |list_potentiometer| 
   * - 1 * USB-Kabel
     - 1 * Steckbrett
     - Steckbr√ºcken
     -
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 
     -

     
**Bauanleitung**

Dieser Schaltkreis baut auf dem aus Lektion 12 auf, indem ein Potentiometer hinzugef√ºgt wird.

.. image:: img/15_cool_warm_color.png
    :width: 500
    :align: center

1. Entferne das Steckbr√ºckenkabel, das den GND-Pin des Arduino Uno R3 mit dem GND-Pin der RGB-LED verbindet, und stecke es in den Minuspol des Steckbretts. Verbinde dann ein weiteres Steckbr√ºckenkabel vom Minuspol des Steckbretts mit dem GND-Pin der RGB-LED.

.. image:: img/15_cool_warm_color_gnd.png
    :width: 500
    :align: center

2. Setze das Potentiometer in die L√∂cher 25G, 26F und 27G ein.

.. image:: img/15_cool_warm_color_pot.png
    :width: 500
    :align: center

3. Verbinde den mittleren Pin des Potentiometers mit dem A0-Pin des Arduino Uno R3.

.. image:: img/15_cool_warm_color_a0.png
    :width: 500
    :align: center

4. Schlie√üe schlie√ülich den linken Pin des Potentiometers an den 5V-Pin des Arduino Uno R3 und den rechten Pin an den Minuspol des Steckbretts an.

.. image:: img/15_cool_warm_color.png
    :width: 500
    :align: center



Code-Erstellung
---------------------

**Verst√§ndnis von warmen und k√ºhlen Farben**

Bevor wir die Farbtemperatur anpassen, m√ºssen wir die Unterschiede zwischen den RGB-Werten f√ºr k√ºhle und warme Farben verstehen.

Die Wahrnehmung von W√§rme bei der Beleuchtung ist etwas subjektiv, aber unbestritten sollten warme Farben eher in Richtung Orange-Rot und k√ºhle Farben eher in Richtung Blau tendieren.

1. √ñffne **Paint** oder ein beliebiges Farb-Auswahl-Tool, finde die Farben, die du als am w√§rmsten und am k√ºhlsten empfindest, und notiere deren RGB-Werte in deinem Notizbuch.

.. note::

    Beachte, dass du vor der Auswahl einer Farbe die Lumenzahl auf die richtige Position einstellst.

.. list-table::
   :widths: 25 25 50 25
   :header-rows: 1

   * - Farbtyp
     - Rot
     - Gr√ºn
     - Blau
   * - Warme Farbe
     -
     -
     -
   * - K√ºhle Farbe
     -
     -
     -

2. Hier sind Beispiele f√ºr warme und k√ºhle T√∂ne sowie deren RGB-Werte:

* Rot (Rot: 246, Gr√ºn: 52, Blau: 8)

.. image:: img/15_mix_color_tone_warm.png

* Hellblau (Rot: 100, Gr√ºn: 150, Blau: 255)

.. image:: img/15_mix_color_tone_cool.png

Der Hauptunterschied zwischen warmen und k√ºhlen Farben liegt im Verh√§ltnis der Intensit√§ten der drei Prim√§rfarben. Als n√§chstes speichern wir diese warmen und k√ºhlen RGB-Werte in unserem Sketch.

3. √ñffne den zuvor gespeicherten Sketch ``Lesson11_PWM_Color_Mixing``. W√§hle ‚ÄûSpeichern unter...‚Äú aus dem ‚ÄûDatei‚Äú-Men√º und benenne ihn in ``Lesson15_Cool_Warm_Color`` um. Klicke auf ‚ÄûSpeichern‚Äú.

4. Deklariere vor dem ``void setup()`` sechs Variablen, um die RGB-Werte dieser beiden Farben zu speichern. Verwende die Farben, die du ausgew√§hlt hast.

.. code-block:: Arduino
    :emphasize-lines: 1-4,6-9

    // RGB-Werte f√ºr eine warme Farbe
    int warm_r = 246;
    int warm_g = 52;
    int warm_b = 8;

    // RGB-Werte f√ºr eine k√ºhle Farbe
    int cool_r = 100;
    int cool_g = 150;
    int cool_b = 255;

    void setup() {
        // Setup-Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);   // Setze den Blau-Pin der RGB-LED als Ausgang
        pinMode(10, OUTPUT);  // Setze den Gr√ºn-Pin der RGB-LED als Ausgang
        pinMode(11, OUTPUT);  // Setze den Rot-Pin der RGB-LED als Ausgang
    }

**Verwendung der map() Funktion**

Um von warmer zu k√ºhler Beleuchtung zu wechseln, musst du lediglich die Intensit√§t des roten Lichts reduzieren, das blaue Licht erh√∂hen und die Intensit√§t des gr√ºnen Lichts feinjustieren.

In fr√ºheren Projekten haben wir gelernt, wie man die Helligkeit einer LED in Abh√§ngigkeit von der Drehung eines Potentiometers variiert.

In diesem Projekt bewirkt die Drehung des Potentiometers jedoch, dass sich die Intensit√§ten der RGB-Pins innerhalb eines bestimmten Bereichs √§ndern, wodurch einfache Division nicht ausreicht. Daher ben√∂tigen wir die neue Funktion ``map()``.

In der Arduino-Programmierung ist die ``map()``-Funktion √§u√üerst n√ºtzlich, da sie es erm√∂glicht, einen numerischen Bereich in einen anderen umzuwandeln.

So verwendest du sie:

* ``map(value, fromLow, fromHigh, toLow, toHigh)``: Ordnet eine Zahl einem anderen Bereich zu. Das bedeutet, dass ein Wert von ``fromLow`` zu ``toLow`` wird, ein Wert von ``fromHigh`` zu ``toHigh``, Zwischenwerte werden proportional skaliert, etc.

    **Parameter**
        * ``value``: Die Zahl, die umgerechnet werden soll.
        * ``fromLow``: Untere Grenze des aktuellen Bereichs.
        * ``fromHigh``: Obere Grenze des aktuellen Bereichs.
        * ``toLow``: Untere Grenze des Zielbereichs.
        * ``toHigh``: Obere Grenze des Zielbereichs.

    **R√ºckgabewert**
        Der umgerechnete Wert. Datentyp: long.

Die ``map()``-Funktion skaliert einen Wert von seinem urspr√ºnglichen Bereich (fromLow bis fromHigh) in einen neuen Bereich (toLow bis toHigh). Zuerst berechnet sie die Position des ``value`` innerhalb seines urspr√ºnglichen Bereichs und wendet dann dieselbe Proportion an, um diese Position in den neuen Bereich zu skalieren.

.. image:: img/15_map_pic.png
    :width: 400
    :align: center

Dies kann als Formel wie unten gezeigt geschrieben werden:

.. code-block::

    (value-fromLow)/(fromHigh-fromLow) = (y-toLow)/(toHigh-toLow)

Unter Verwendung der Algebra kannst du diese Gleichung umstellen, um ``y`` zu berechnen:

.. code-block::

    y = (value-fromLow) * (toHigh-toLow) / (fromHigh-fromLow) + toLow

.. image:: img/15_map_format.png

Zum Beispiel unter Verwendung von ``y = map(value, 0, 1023, 246, 100);``, wenn ``value`` 434 betr√§gt, dann ``y = (434-0) * (100 - 246) / (1023-0) + 246``, was ungef√§hr 152 ergibt.


5. Entferne den urspr√ºnglichen Code in ``void loop()``, und schreibe dann den Code, um den Wert des Potentiometers zu lesen und ihn in der Variablen ``potValue`` zu speichern.

.. code-block:: Arduino

    void loop() {
        // Hauptschleife, die wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Lese den Wert vom Potentiometer
    }

6. Verwende dann die ``map()``-Funktion, um den Wert des Potentiometers von dem Bereich 0~1023 auf den Bereich 255 (``warm_r``) ~ 100 (``cool_r``) zu skalieren.

.. code-block:: Arduino

    void loop() {
        // Hauptschleife, die wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Lese den Wert vom Potentiometer
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Mappe den Potentiometer-Wert auf die Rot-Intensit√§t
    }

7. Du kannst den seriellen Monitor verwenden, um den ``potValue`` und den gemappten Wert ``value_r`` anzuzeigen, um dein Verst√§ndnis der ``map()``-Funktion zu vertiefen. Starte jetzt den seriellen Monitor in ``void setup()``.

.. code-block:: Arduino
    :emphasize-lines: 6

    void setup() {
        // Setup-Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);   // Setze den Blau-Pin der RGB-LED als Ausgang
        pinMode(10, OUTPUT);  // Setze den Gr√ºn-Pin der RGB-LED als Ausgang
        pinMode(11, OUTPUT);  // Setze den Rot-Pin der RGB-LED als Ausgang
        Serial.begin(9600);        // Setze die serielle Kommunikation auf 9600 Baud ein
    }

8. Drucke die Variablen ``potValue`` und ``value_r`` in derselben Zeile, getrennt durch "|".

.. code-block:: Arduino
    :emphasize-lines: 23-26

    // RGB-Werte f√ºr eine warme Farbe
    int warm_r = 246;
    int warm_g = 52;
    int warm_b = 8;

    // RGB-Werte f√ºr eine k√ºhle Farbe
    int cool_r = 100;
    int cool_g = 150;
    int cool_b = 255;

    void setup() {
        // Setup-Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);   // Setze den Blau-Pin der RGB-LED als Ausgang
        pinMode(10, OUTPUT);  // Setze den Gr√ºn-Pin der RGB-LED als Ausgang
        pinMode(11, OUTPUT);  // Setze den Rot-Pin der RGB-LED als Ausgang
        Serial.begin(9600);        // Setze die serielle Kommunikation auf 9600 Baud ein
    }

    void loop() {
        // Hauptschleife, die wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Lese den Wert vom Potentiometer
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Mappe den Potentiometer-Wert auf die Rot-Intensit√§t
        Serial.print(potValue);
        Serial.print(" | ");
        Serial.println(value_r);
        delay(500);  // Warte 500 ms
    }

    // Funktion zum Setzen der Farbe der RGB-LED
    void setColor(int red, int green, int blue) {
        analogWrite(11, red);    // Schreibe PWM auf den Rot-Pin
        analogWrite(10, green);  // Schreibe PWM auf den Gr√ºn-Pin
        analogWrite(9, blue);    // Schreibe PWM auf den Blau-Pin
    }

9. Du kannst jetzt deinen Code verifizieren und hochladen, den seriellen Monitor √∂ffnen, und du wirst sehen, dass zwei Spalten von Daten gedruckt werden.

.. code-block::

    434 | 152
    435 | 152
    434 | 152
    434 | 152
    434 | 152
    434 | 152

Anhand der Daten wird deutlich, dass die Position des Werts 434 im Bereich von 0~1023 der Position von 152 im Bereich von 246~100 entspricht.

**Anpassen der Farbtemperatur**

Hier verwenden wir die Funktion ``map()``, um die Intensit√§t der drei Pins der RGB-LED mit der Drehung des Potentiometers zu ver√§ndern und dabei die w√§rmsten bis k√§ltesten Farbt√∂ne zu durchlaufen. 

Genauer gesagt, wie in dem Beispiel mit den Referenzwerten, die ich angegeben habe, √§ndert sich bei Drehung des Potentiometers der R-Wert der RGB-LED allm√§hlich von 246 zu 100, der G-Wert von 8 zu 150 (obwohl die √Ñnderung des G-Werts nicht sehr auff√§llig ist), und der B-Wert von 8 zu 255.

10. Wir ben√∂tigen vor√ºbergehend keine serielle Ausgabe, und die serielle Ausgabe kann den gesamten Codeablauf beeintr√§chtigen. Verwende also ``Ctrl + /``, um den zugeh√∂rigen Code auszukommentieren.

    .. note::

        Der Grund, warum nicht direkt gel√∂scht wird, ist, dass wenn du sp√§ter eine Ausgabe ben√∂tigst, du diese Zeilen einfach durch Dr√ºcken von ``Ctrl + /`` wieder einf√ºgen kannst.

.. code-block:: Arduino
    :emphasize-lines: 3,4

    void loop() {
        // Hauptschleife, die wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Lese den Wert vom Potentiometer
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Mappe den Potentiometer-Wert auf die Rot-Intensit√§t
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // Warte 500 ms
    }

11. F√ºhre die ``map()``-Funktion weiter aus, um die gemappten Werte ``value_g`` und ``value_b`` basierend auf dem Wert des Potentiometers zu erhalten.

.. code-block:: Arduino
    :emphasize-lines: 9,10

    void loop() {
        // Hauptschleife, die wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Lese den Wert vom Potentiometer
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Mappe den Potentiometer-Wert auf die Rot-Intensit√§t
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // Warte 500 ms
        int value_g = map(potValue, 0, 1023, warm_g, cool_g);  // Mappe den Potentiometer-Wert auf die Gr√ºn-Intensit√§t
        int value_b = map(potValue, 0, 1023, warm_b, cool_b);  // Mappe den Potentiometer-Wert auf die Blau-Intensit√§t
    }

12. Rufe schlie√ülich die Funktion ``setColor()`` auf, um die gemappten RGB-Werte auf der RGB-LED anzuzeigen.

.. code-block:: Arduino
    :emphasize-lines: 11,12

    void loop() {
        // Hauptschleife, die wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Lese den Wert vom Potentiometer
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Mappe den Potentiometer-Wert auf die Rot-Intensit√§t
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // Warte 500 ms
        int value_g = map(potValue, 0, 1023, warm_g, cool_g);  // Mappe den Potentiometer-Wert auf die Gr√ºn-Intensit√§t
        int value_b = map(potValue, 0, 1023, warm_b, cool_b);  // Mappe den Potentiometer-Wert auf die Blau-Intensit√§t
        setColor(value_r, value_g, value_b);                   // Setze die LED-Farbe
        delay(500);
    }

13. Dein vollst√§ndiger Code sieht wie folgt aus; du kannst jetzt auf den Upload-Button klicken, um den Code auf das Arduino Uno R3 hochzuladen. Danach kannst du das Potentiometer drehen, und du wirst bemerken, wie die RGB-LED allm√§hlich von einem k√ºhlen zu einem warmen Farbton oder von einem warmen zu einem k√ºhlen Farbton √ºbergeht.

.. code-block:: Arduino

    // RGB-Werte f√ºr eine warme Farbe
    int warm_r = 246;
    int warm_g = 52;
    int warm_b = 8;

    // RGB-Werte f√ºr eine k√ºhle Farbe
    int cool_r = 100;
    int cool_g = 150;
    int cool_b = 255;

    void setup() {
        // Setup-Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);   // Setze den Blau-Pin der RGB-LED als Ausgang
        pinMode(10, OUTPUT);  // Setze den Gr√ºn-Pin der RGB-LED als Ausgang
        pinMode(11, OUTPUT);  // Setze den Rot-Pin der RGB-LED als Ausgang
    }

    void loop() {
        // Hauptschleife, die wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Lese den Wert vom Potentiometer
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Mappe den Potentiometer-Wert auf die Rot-Intensit√§t
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // Warte 500 ms
        int value_g = map(potValue, 0, 1023, warm_g, cool_g);  // Mappe den Potentiometer-Wert auf die Gr√ºn-Intensit√§t
        int value_b = map(potValue, 0, 1023, warm_b, cool_b);  // Mappe den Potentiometer-Wert auf die Blau-Intensit√§t
        setColor(value_r, value_g, value_b);                   // Setze die LED-Farbe
        delay(500);                                            // Warte 500 ms
    }

    // Funktion zum Setzen der Farbe der RGB-LED
    void setColor(int red, int green, int blue) {
        analogWrite(11, red);    // Schreibe PWM auf den Rot-Pin
        analogWrite(10, green);  // Schreibe PWM auf den Gr√ºn-Pin
        analogWrite(9, blue);    // Schreibe PWM auf den Blau-Pin
    }

14. Speichere schlie√ülich deinen Code und r√§ume deinen Arbeitsplatz auf.

**Tipps**

W√§hrend des Experiments k√∂nntest du feststellen, dass der Wechsel zwischen warmen und k√ºhlen Farbt√∂nen nicht so deutlich ist, wie er auf dem Bildschirm erscheint. Zum Beispiel kann ein erwartetes warmes Licht wei√ü erscheinen. Dies ist normal, da die Farbmischung in einer RGB-LED nicht so fein abgestimmt ist wie auf einem Display.

In solchen F√§llen kannst du die Intensit√§t der G- und B-Werte in der warmen Farbe reduzieren, um die RGB-LED eine passendere Farbe anzeigen zu lassen.

**Frage**

Beachte, dass die ‚Äûunteren Grenzen‚Äú beider Bereiche gr√∂√üer oder kleiner als die ‚Äûoberen Grenzen‚Äú sein k√∂nnen, sodass die Funktion ``map(value, fromLow, fromHigh, toLow, toHigh)`` auch verwendet werden kann, um einen Zahlenbereich umzukehren, zum Beispiel:

.. code-block::

    y = map(x, 1, 50, 50, 1);

Die Funktion verarbeitet auch negative Zahlen gut, sodass dieses Beispiel ebenfalls g√ºltig ist:

.. code-block::

    y = map(x, 1, 50, 50, -100);

F√ºr ``y = map(x, 1, 50, 50, -100);``, wenn ``x`` 20 betr√§gt, was sollte ``y`` sein? Verwende die folgende Formel, um es zu berechnen.

.. image:: img/15_map_format.png

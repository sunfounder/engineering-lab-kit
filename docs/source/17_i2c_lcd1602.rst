.. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauche tiefer in die Welt von Raspberry Pi, Arduino und ESP32 mit Gleichgesinnten ein.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Probleme nach dem Kauf und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Tutorials aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitig Zugang zu neuen Produktank√ºndigungen und Sneak Peeks.
    - **Exklusive Rabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Bereit, mit uns zu entdecken und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie noch heute bei!

.. _ar_i2c_lcd1602:

17. Erkundung des I2C LCD1602 Displays
================================================
  
Willkommen zu unserem praktischen Leitfaden zur Nutzung des I2C LCD1602! In dieser Lektion entdecken wir die Grundlagen der Arbeit mit diesem vielseitigen Display-Modul. Du wirst lernen, wie du das I2C LCD1602 mit deinem Arduino einrichtest, seine eindeutige I2C-Adresse findest und die notwendigen Bibliotheken installierst, um es zum Laufen zu bringen. Am Ende wirst du wissen, wie man Befehle sendet und Text anzeigt, sodass deine Codezeilen in klare, lesbare Informationen auf dem Bildschirm umgewandelt werden.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/17_i2c_lcd.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Nach Abschluss dieses Kurses wirst du in der Lage sein:

* Die grundlegenden Funktionen des I2C LCD1602 Moduls zu verstehen.
* Zu lernen, wie du die I2C-Adresse von Ger√§ten innerhalb der Arduino-Umgebung herausfindest.
* Die Installation und Nutzung von Bibliotheken in der Arduino IDE zu beherrschen.
* Eigene Nachrichten und Daten auf dem I2C LCD1602 anzuzeigen.

Baue die Schaltung auf
------------------------------------

**Ben√∂tigte Komponenten**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * I2C LCD1602
     - 1 * Breadboard
     - 1 * USB-Kabel
   * - |list_uno_r3|
     - |list_i2c_lcd1602| 
     - |list_breadboard|
     - |list_usb_cable|
   * - Jumper-Kabel
     - 
     - 
     - 
   * - |list_wire|
     - 
     - 
     - 


**Aufbauschritte**

Folge dem Schaltplan oder den folgenden Schritten, um deine Schaltung aufzubauen.

.. image:: img/17_lcd_connect.png
    :width: 700
    :align: center

1. Finde das I2C LCD1602 Modul.

.. image:: img/17_lcd_i2c_lcd1602.png
    :width: 600
    :align: center

* **GND**: Masse
* **VCC**: Spannungsversorgung, 5V.
* **SDA**: Serielle Datenleitung. Verbinde sie √ºber einen Pullup-Widerstand mit VCC.
* **SCL**: Serielle Taktleitung. Verbinde sie √ºber einen Pullup-Widerstand mit VCC.

Wie wir alle wissen, bereichern LCDs und einige andere Anzeigen die Mensch-Maschine-Interaktion erheblich, sie haben jedoch einen gemeinsamen Nachteil. Wenn sie mit einem Controller verbunden sind, werden mehrere IO-Pins des Controllers belegt, der nicht so viele externe Ports hat. Dies schr√§nkt auch andere Funktionen des Controllers ein. 

Daher wurde das LCD1602 mit einem I2C-Modul entwickelt, um dieses Problem zu l√∂sen. Das I2C-Modul enth√§lt einen integrierten PCF8574 I2C-Chip, der serielle I2C-Daten in parallele Daten f√ºr die LCD-Anzeige umwandelt.        

* `PCF8574 Datasheet <https://www.ti.com/lit/ds/symlink/pcf8574.pdf?ts=1627006546204&ref_url=https%253A%252F%252Fwww.google.com%252F>`_

**Hintergrundbeleuchtung/Kontrast**

Die Hintergrundbeleuchtung kann durch eine Kurzschlusskappe aktiviert werden, indem du die Kappe entfernst, wird die Hintergrundbeleuchtung deaktiviert. Das blaue Potentiometer auf der R√ºckseite wird verwendet, um den Kontrast (das Verh√§ltnis zwischen dem hellsten Wei√ü und dem dunkelsten Schwarz) einzustellen.

.. image:: img/17_lcd_back.jpg
    :width: 500
    :align: center

* **Kurzschlusskappe**: Die Hintergrundbeleuchtung kann durch diese Kappe aktiviert werden, entferne die Kappe, um die Hintergrundbeleuchtung zu deaktivieren.
* **Potentiometer**: Wird zur Einstellung des Kontrasts verwendet (die Klarheit des angezeigten Textes), der im Uhrzeigersinn erh√∂ht und gegen den Uhrzeigersinn verringert wird.

2. Das Uno R3 Board verf√ºgt √ºber zwei S√§tze von I2C-Pins. Du kannst das I2C LCD1602 mit beiden Pin-Sets verbinden.

.. image:: img/17_lcd_uno_i2c.jpg
    :width: 500
    :align: center

3. Nun verbinden wir das I2C LCD1602 mit dem Arduino Uno R3 Board.

.. image:: img/17_lcd_connect.png
    :width: 700
    :align: center

Code-Erstellung - Abrufen der I2C-Adresse
----------------------------------------------

Bevor du ein I2C-Ger√§t verwenden kannst, musst du normalerweise seine Adresse herausfinden. Schauen wir uns an, wie das geht.

1. √ñffne die Arduino IDE und starte ein neues Projekt, indem du im Men√º ‚ÄûDatei‚Äú ‚ÄûNeuer Sketch‚Äú ausw√§hlst.
2. Speichere deinen Sketch unter dem Namen ``Lesson17_I2C_Scanner`` mit ``Strg + S`` oder durch Klicken auf ‚ÄûSpeichern‚Äú.

3. Kopiere den folgenden Code in deinen neuen Sketch und speichere ihn.

.. code-block:: Arduino

    #include <Wire.h>

    void setup() {
        Wire.begin();
        Serial.begin(9600);
        while (!Serial); // Warten auf die serielle Verbindung
        Serial.println("\nI2C Scanner");
    }

    void loop() {
        byte error, address;
        int nDevices;

        Serial.println("Scanning...");

        nDevices = 0;
        for (address = 1; address < 127; address++) {
            Wire.beginTransmission(address);
            error = Wire.endTransmission();

            if (error == 0) {
                Serial.print("I2C device found at address 0x");
                if (address < 16) {
                    Serial.print("0");
                }
                Serial.println(address, HEX);

                nDevices++;
            }else if (error == 4) {
                Serial.print("Unknown error at address 0x");
                if (address < 16) {
                    Serial.print("0");
                }
                Serial.println(address, HEX);
            }
        }   
        if(nDevices == 0) {
            Serial.println("No I2C devices found\n");
        }else {
            Serial.println("done\n");
        }
        delay(5000); // 5 Sekunden warten, bevor erneut gescannt wird
    }

4. Klicke auf den Upload-Button. Wenn dein I2C LCD1602 korrekt angeschlossen ist, wirst du Informationen sehen. Die Standardadresse ist im Allgemeinen 0x27, in einigen F√§llen kann sie 0x3F sein.

.. code-block::

    Scanning...
    I2C device found at address 0x27
    done



Code-Erstellung - Nachrichten anzeigen
------------------------------------------
Schauen wir uns nun an, wie man gew√ºnschte Nachrichten auf dem I2C LCD1602 anzeigt.

1. √ñffne die Arduino IDE und starte ein neues Projekt, indem du im Men√º ‚ÄûDatei‚Äú ‚ÄûNeuer Sketch‚Äú ausw√§hlst.
2. Speichere deinen Sketch unter dem Namen ``Lesson17_I2C_Show`` mit ``Ctrl + S`` oder durch Klicken auf ‚ÄûSpeichern‚Äú.

3. Um das I2C LCD1602-Modul zu verwenden, musst du die entsprechende Bibliothek einbinden. Anders als die ``Servo``-Bibliothek, die wir zuvor verwendet haben, ist die ben√∂tigte Bibliothek f√ºr das I2C LCD1602 nicht standardm√§√üig in der Arduino IDE enthalten. Du musst sie im Bibliotheks-Manager suchen und installieren.

Suche im **Bibliotheks-Manager** nach ``LiquidCrystal I2C`` und klicke auf **INSTALLIEREN**.

    .. image:: img/17_lcd_install_lib.png

4. Nach Abschluss der Installation erh√§ltst du eine Benachrichtigung. Normalerweise enth√§lt die Bibliothek einige Beispielcodes, um dir das Lernen der Funktionen zu erleichtern. Du findest diese Beispiele, indem du auf **Datei** -> **Beispiele** -> **LiquidCrystal I2C** klickst. Es gibt drei Beispielcodes; du kannst einen davon √∂ffnen, auf dein Arduino-Board hochladen und sehen, was passiert.

5. Beginnen wir nun mit dem Programmieren. Vor der Nutzung jeder Bibliothek ist es wichtig, sie in deinem Sketch einzubinden. 

* ``Wire.h`` ist entscheidend f√ºr die I2C-Kommunikation und erm√∂glicht die Schnittstelle mit dem LCD. 
* ``LiquidCrystal_I2C.h`` ist speziell daf√ºr ausgelegt, LCD-Displays zu steuern, die √ºber den I2C-Bus verbunden sind.

.. code-block:: Arduino
    :emphasize-lines: 1,2

    #include <Wire.h>               // Bindet die I2C-Kommunikationsbibliothek ein.
    #include <LiquidCrystal_I2C.h>  // Bindet die Bibliothek zur Steuerung des I2C LCD ein.


    void setup() {
        // Code, der einmalig ausgef√ºhrt wird:

    }

6. Erstelle nun eine Instanz der ``LiquidCrystal_I2C``-Klasse namens ``lcd``. Die Parameter (``0x27``, ``16``, ``2``) geben die I2C-Adresse des LCDs (``0x27``) sowie an, dass das Display 16 Zeichen pro Zeile und 2 Zeilen hat.

.. code-block:: Arduino
    :emphasize-lines: 4

    #include <Wire.h>               // Bindet die I2C-Kommunikationsbibliothek ein.
    #include <LiquidCrystal_I2C.h>  // Bindet die Bibliothek zur Steuerung des I2C LCD ein.

    LiquidCrystal_I2C lcd(0x27, 16, 2);  // Initialisiert das LCD an Adresse 0x27 f√ºr ein 16x2 Display.

    void setup() {
        // Code, der einmalig ausgef√ºhrt wird:

    }

7. Im ``void setup()``-Block wird das LCD-Display mit ``lcd.init()`` initialisiert und die Hintergrundbeleuchtung mit ``lcd.backlight()`` eingeschaltet. Dadurch wird die Anzeige sichtbar.

.. code-block:: Arduino
    :emphasize-lines: 8,9

    #include <Wire.h>               // Bindet die I2C-Kommunikationsbibliothek ein.
    #include <LiquidCrystal_I2C.h>  // Bindet die Bibliothek zur Steuerung des I2C LCD ein.
    
    LiquidCrystal_I2C lcd(0x27, 16, 2);  // Initialisiert das LCD an Adresse 0x27 f√ºr ein 16x2 Display.

    void setup() {
        // Code, der einmalig ausgef√ºhrt wird:
        lcd.init();       // Initialisiert das LCD
        lcd.backlight();  // Schaltet die Hintergrundbeleuchtung ein.
    }

8. Beginne damit, "Let's count!" in Zeile 0, Spalte 0 des I2C LCD1602 anzuzeigen (das ist eigentlich die erste Zeile und die erste Spalte). Verwende die Funktion ``lcd.setCursor()``, um den Cursor auf Zeile 0, Spalte 0 zu positionieren, und verwende anschlie√üend ``lcd.print()``, um die gew√ºnschten Zeichen auszugeben. Denke daran, den Text in doppelte Anf√ºhrungszeichen ("") zu setzen.

.. image:: img/17_lcd_row_column.png
    :width: 600
    :align: center

.. code-block:: Arduino
    :emphasize-lines: 2,3

    void loop() {
        lcd.setCursor(0, 0);       // Positioniert den Cursor in die obere linke Ecke.
        lcd.print("Let's count");  // Zeigt "Let's count" an.
    }

9. Als N√§chstes zeige "Count" gefolgt vom Z√§hlwert in Zeile 1, Spalte 0 an (das ist eigentlich die zweite Zeile und die erste Spalte). Beachte, dass bei der Ausgabe von Zeichen und Strings diese in doppelte Anf√ºhrungszeichen ("") gesetzt werden m√ºssen, w√§hrend f√ºr Variablen nur der Variablenname in den Klammern stehen muss.

.. code-block:: Arduino
    :emphasize-lines: 4-6

    void loop() {
        lcd.setCursor(0, 0);       // Positioniert den Cursor in die obere linke Ecke.
        lcd.print("Let's count");  // Zeigt "Let's count" an.
        lcd.setCursor(0, 1);       // Verschiebt den Cursor in die zweite Zeile.
        lcd.print("Count: ");      // Zeigt "Count" an.
        lcd.print(count);          // Gibt den aktuellen Z√§hlwert neben "Count" aus.
    }

10. Lass die Variable ``count`` jede Sekunde um eins erh√∂hen, indem du ``count++`` verwendest, was der Variable selbst 1 hinzuf√ºgt.

.. code-block:: Arduino
    :emphasize-lines: 7,8

    void loop() {
        lcd.setCursor(0, 0);       // Positioniert den Cursor in die obere linke Ecke.
        lcd.print("Let's count");  // Zeigt "Let's count" an.
        lcd.setCursor(0, 1);       // Verschiebt den Cursor in die zweite Zeile.
        lcd.print("Count: ");      // Zeigt "Count" an.
        lcd.print(count);          // Gibt den aktuellen Z√§hlwert neben "Count" aus.
        delay(1000);               // Wartet eine Sekunde.
        count++;                   // Erh√∂ht den Z√§hler um 1.
    }

11. Leere abschlie√üend das Display mit ``lcd.clear()``, um es f√ºr die n√§chste Zahl vorzubereiten.

.. code-block:: Arduino
    :emphasize-lines: 21

    #include <Wire.h>               // Inkludiert die I2C-Kommunikationsbibliothek.
    #include <LiquidCrystal_I2C.h>  // Inkludiert die Bibliothek zur Steuerung des I2C LCD.

    LiquidCrystal_I2C lcd(0x27, 16, 2);  // Initialisiert das LCD an Adresse 0x27 f√ºr ein 16x2 Display.

    int count = 0;  // Z√§hlervariable f√ºr die Erh√∂hung.

    void setup() {
        lcd.init();       // Initialisiert das LCD-Display.
        lcd.backlight();  // Schaltet die Hintergrundbeleuchtung des LCDs ein.
    }

    void loop() {
        lcd.setCursor(0, 0);       // Positioniert den Cursor in die obere linke Ecke.
        lcd.print("Let's count");  // Zeigt "Let's count" an.
        lcd.setCursor(0, 1);       // Verschiebt den Cursor in die zweite Zeile.
        lcd.print("Count: ");      // Zeigt "Count" an.
        lcd.print(count);          // Gibt den aktuellen Z√§hlwert neben "Count" aus.
        delay(1000);               // Wartet eine Sekunde.
        count++;                   // Erh√∂ht den Z√§hler um 1.
        lcd.clear();               // Leert das Display f√ºr die n√§chste Iteration.
    }

12. Sobald du den Code fertiggestellt hast, kannst du auf Upload klicken, um die Ergebnisse zu sehen. Du wirst sehen, dass die erste Zeile des I2C LCD1602 "Let's count!" anzeigt und die zweite Zeile "Count: " gefolgt vom Z√§hlwert.

.. note::

    Wenn deine Verdrahtung korrekt ist, aber keine Zeichen auf dem LCD angezeigt werden, kannst du es umdrehen und mit einem Schraubenzieher den blauen Potentiometer einstellen. Drehe ihn, bis die Zeichen klar sichtbar sind und der Hintergrund relativ gedimmt ist, was auf eine erfolgreiche Einstellung hinweist.

.. image:: img/17_lcd_back.jpg
    :width: 500
    :align: center

13. Denke schlie√ülich daran, deinen Code zu speichern und deinen Arbeitsplatz aufzur√§umen.

**Frage**

Wie sollte der Code ge√§ndert werden, wenn du "Let's count" in der zweiten Spalte der ersten Zeile des I2C LCD1602 anzeigen m√∂chtest?

**Zusammenfassung**

In dieser Lektion haben wir gelernt, wie man mit dem Arduino Uno R3-Board unter Verwendung des I2C LCD1602-Moduls interagiert. Du hast gelernt, wie du die I2C-Adresse abrufst und die erforderlichen Bibliotheken in der Arduino IDE installierst, um das LCD-Modul zu steuern. Durch das Schreiben und Hochladen von Code hast du erfolgreich Zeichen und Z√§hldaten auf dem LCD angezeigt. Diese Schritte haben nicht nur unser Verst√§ndnis des I2C-Kommunikationsprotokolls vertieft, sondern auch unsere F√§higkeit verbessert, mit Anzeigeger√§ten umzugehen.
